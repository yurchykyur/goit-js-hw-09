{"mappings":"gfAsBA,IAAAA,EAAAC,EAAA,SAEMC,EAAO,CACXC,KAAMC,SAASC,cAAc,SAC7BC,WAAYF,SAASG,iBAAiB,eACtCC,qBAAsBJ,SAASC,cAAc,0BAE/CH,EAAKC,KAAKM,iBAAiB,UAE3B,SAAqCC,GACnCA,EAAEC,iBAWJ,SAA6BC,G,IACtBC,GAAa,EAAbC,GAAa,EAAbC,OAAaC,E,IAAlB,QAAKC,EAAAC,EAAiBN,EAAQO,OAAAC,cAAzBP,GAAAI,EAAAC,EAAaG,QAAAC,MAAbT,GAAa,GAAbI,EAAaM,MAEbC,MAAK,SAAAC,G,IAAGC,EAAQD,EAARC,SAAUC,EAAKF,EAALE,M,OACjB3B,EAAA4B,OAAOC,QAAQ,aAAiCC,OAApBJ,EAAS,aAAiBI,OAANH,G,IAEjDI,OAAM,SAAAN,G,IAAGC,EAAQD,EAARC,SAAUC,EAAKF,EAALE,M,OAClB3B,EAAA4B,OAAOI,QAAQ,aAAiCF,OAApBJ,EAAS,aAAiBI,OAANH,G,cANjDb,GAAa,EAAbC,EAAakB,C,aAAbpB,GAAa,MAAbK,EAAagB,QAAbhB,EAAagB,Q,YAAbpB,E,MAAAC,C,GAVLoB,EAkC2BC,EAI7B,SAAiCC,GAE/B,IADA,IAAMD,EAAM,GACHE,EAAI,EAAGA,GAAKD,EAAIE,OAAQD,GAAK,EAAG,CACvC,IAAMZ,EAAWY,EACbX,EAAQa,OAAOH,EAAIV,OAASa,OAAOH,EAAII,MAAQH,EAAI,IACvDF,EAAIM,KAAK,CAAEhB,WAAUC,S,CAEvB,OAAOS,C,CAxCmBO,EA2CIC,EA5CgB1C,EAAKI,WA6C7C+B,EAAM,GACZO,EAAOC,SAAQ,SAAAC,GACbT,EAAIS,EAAKC,aAAa,SAAWD,EAAKvB,K,IAEjCc,IAlBAD,EAAIY,KAAI,SAAAvB,G,OAdjB,SAAuBC,EAAUC,GAC/B,IAAMsB,EAAgBC,KAAKC,SAAW,GACtC,OAAO,IAAIC,SAAQ,SAACC,EAASC,GAC3BC,YAAW,WACLN,EACFI,EAAQ,CAAE3B,WAAUC,UAEpB2B,EAAO,CAAE5B,WAAUC,S,GAEpBA,E,IAKmC6B,CAAd/B,EAARC,SAAeD,EAALE,M,MAhC9B,IA+B6BS,EAcGQ,EACxBP,C","sources":["src/js/03-promises.js"],"sourcesContent":["// Завдання 3 - генератор промісів\n// Виконуй це завдання у файлах 03 - promises.html і 03 - promises.js.Подивися демо - відео роботи генератора промісів.\n// HTML містить розмітку форми, в поля якої користувач буде вводити першу затримку в мілісекундах,\n// крок збільшення затримки для кожного промісу після першого і кількість промісів, яку необхідно створити.\n\n//   Напиши скрипт, який на момент сабміту форми викликає функцію createPromise(position, delay) стільки разів,\n// скільки ввели в поле amount.\n// Під час кожного виклику передай їй номер промісу(position), що створюється, і затримку,\n// враховуючи першу затримку(delay), введену користувачем, і крок(step).\n\n//   Доповни код функції createPromise таким чином, щоб вона повертала один проміс,\n// який виконується або відхиляється через delay часу.\n// Значенням промісу повинен бути об'єкт, в якому будуть властивості position і delay зі значеннями однойменних параметрів.\n// Використовуй початковий код функції для вибору того, що потрібно зробити з промісом - виконати або відхилити.\n\n// Бібліотека повідомлень\n// УВАГА\n// Наступний функціонал не обов'язковий для здавання завдання, але буде хорошою додатковою практикою.\n\n// Для відображення повідомлень користувачеві, замість console.log(), використовуй бібліотеку notiflix.\n// https://github.com/notiflix/Notiflix#readme\n\nimport { Notify } from 'notiflix/build/notiflix-notify-aio';\n\nconst refs = {\n  form: document.querySelector('.form'),\n  formInputs: document.querySelectorAll('.form input'),\n  buttonCreatePromises: document.querySelector('button[type=\"submit\"]'),\n};\nrefs.form.addEventListener('submit', onClickButtonCreatePromises);\n\nfunction onClickButtonCreatePromises(e) {\n  e.preventDefault();\n  const promises = creatingPromises();\n  startingAllPromises(promises);\n}\n\nfunction creatingPromises() {\n  const objInputsValue = createObjFromInputData(refs.formInputs);\n  const arrayDataPromises = createArrayDataPromises(objInputsValue);\n  return createArrayPromises(arrayDataPromises);\n}\n\nfunction startingAllPromises(promises) {\n  for (const promise of promises) {\n    promise\n      .then(({ position, delay }) =>\n        Notify.success(`position: ${position}, delay: ${delay}`)\n      )\n      .catch(({ position, delay }) =>\n        Notify.failure(`position: ${position}, delay: ${delay}`)\n      );\n  }\n}\n\nfunction createPromise(position, delay) {\n  const shouldResolve = Math.random() > 0.3;\n  return new Promise((resolve, reject) => {\n    setTimeout(() => {\n      if (shouldResolve) {\n        resolve({ position, delay });\n      } else {\n        reject({ position, delay });\n      }\n    }, delay);\n  });\n}\n\nfunction createArrayPromises(arr) {\n  return arr.map(({ position, delay }) => createPromise(position, delay));\n}\n\nfunction createArrayDataPromises(obj) {\n  const arr = [];\n  for (let i = 1; i <= obj.amount; i += 1) {\n    const position = i;\n    let delay = Number(obj.delay) + Number(obj.step * (i - 1));\n    arr.push({ position, delay });\n  }\n  return arr;\n}\n\nfunction createObjFromInputData(inputs) {\n  const obj = {};\n  inputs.forEach(elem => {\n    obj[elem.getAttribute('name')] = elem.value;\n  });\n  return obj;\n}\n"],"names":["$h6c0i","parcelRequire","$ce04d3a99e08e73b$var$refs","form","document","querySelector","formInputs","querySelectorAll","buttonCreatePromises","addEventListener","e","preventDefault","promises","_iteratorNormalCompletion","_didIteratorError","_iteratorError","undefined","_step","_iterator","Symbol","iterator","next","done","value","then","param","position","delay","Notify","success","concat","catch","failure","err","return","$ce04d3a99e08e73b$var$startingAllPromises","arr","obj","i","amount","Number","step","push","$ce04d3a99e08e73b$var$createArrayDataPromises","inputs","forEach","elem","getAttribute","map","shouldResolve","Math","random","Promise","resolve","reject","setTimeout","$ce04d3a99e08e73b$var$createPromise"],"version":3,"file":"03-promises.1e75ed0f.js.map"}