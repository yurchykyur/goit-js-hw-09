{"mappings":"oeAsBA,IAAAA,EAAAC,EAAA,SAEA,MAAMC,EAAO,CACXC,KAAMC,SAASC,cAAc,SAC7BC,WAAYF,SAASG,iBAAiB,eACtCC,qBAAsBJ,SAASC,cAAc,0BAG/CH,EAAKC,KAAKM,iBAAiB,UAM3B,SAAqCC,GACnCA,EAAEC,kBAoBJ,SAA6BC,GAC3B,IAAK,MAAMC,KAAWD,EACpBC,EACGC,MAAK,EAACC,SAAEA,EAAQC,MAAEA,KACjBhB,EAAAiB,OAAOC,QAAQ,aAAaH,aAAoBC,OAEjDG,OAAM,EAACJ,SAAEA,EAAQC,MAAEA,KAClBhB,EAAAiB,OAAOG,QAAQ,aAAaL,aAAoBC,M,CAzBtDK,CAQF,WACE,MAAMC,EAqER,SAAgCC,GAC9B,MAAMC,EAAM,GAIZ,OAHAD,EAAOE,SAAQC,IACbF,EAAIE,EAAKC,aAAa,SAAWD,EAAKE,KAAK,IAEtCJ,C,CA1EgBK,CAAuB3B,EAAKI,YAEnD,OA2C2BwB,EAS7B,SAAiCN,GAC/B,MAAMM,EAAM,GACZ,IAAK,IAAIC,EAAI,EAAGA,GAAKP,EAAIQ,OAAQD,GAAK,EAAG,CACvC,MAAMhB,EAAWgB,EACjB,IAAIf,EAAQiB,OAAOT,EAAIR,OAASiB,OAAOT,EAAIU,MAAQH,EAAI,IACvDD,EAAIK,KAAK,C,SAAEpB,E,MAAUC,G,CAEvB,OAAOc,C,CA5DmBM,CAAwBd,GA6C3CQ,EAAIO,KAAI,EAACtB,SAAEA,EAAQC,MAAEA,KAnB9B,SAAuBD,EAAUC,GAC/B,MAAMsB,EAAgBC,KAAKC,SAAW,GACtC,OAAO,IAAIC,SAAQ,CAACC,EAASC,KAC3BC,YAAW,KACLN,EACFI,EAAQ,C,SAAE3B,E,MAAUC,IAEpB2B,EAAO,C,SAAE5B,E,MAAUC,GAAQ,GAE5BA,EAAM,G,CAU6B6B,CAAc9B,EAAUC,KADlE,IAA6Bc,C,CAvDVgB,G","sources":["src/js/03-promises.js"],"sourcesContent":["// Завдання 3 - генератор промісів\n// Виконуй це завдання у файлах 03 - promises.html і 03 - promises.js.Подивися демо - відео роботи генератора промісів.\n// HTML містить розмітку форми, в поля якої користувач буде вводити першу затримку в мілісекундах,\n// крок збільшення затримки для кожного промісу після першого і кількість промісів, яку необхідно створити.\n\n//   Напиши скрипт, який на момент сабміту форми викликає функцію createPromise(position, delay) стільки разів,\n// скільки ввели в поле amount.\n// Під час кожного виклику передай їй номер промісу(position), що створюється, і затримку,\n// враховуючи першу затримку(delay), введену користувачем, і крок(step).\n\n//   Доповни код функції createPromise таким чином, щоб вона повертала один проміс,\n// який виконується або відхиляється через delay часу.\n// Значенням промісу повинен бути об'єкт, в якому будуть властивості position і delay зі значеннями однойменних параметрів.\n// Використовуй початковий код функції для вибору того, що потрібно зробити з промісом - виконати або відхилити.\n\n// Бібліотека повідомлень\n// УВАГА\n// Наступний функціонал не обов'язковий для здавання завдання, але буде хорошою додатковою практикою.\n\n// Для відображення повідомлень користувачеві, замість console.log(), використовуй бібліотеку notiflix.\n// https://github.com/notiflix/Notiflix#readme\n\nimport { Notify } from 'notiflix/build/notiflix-notify-aio';\n\nconst refs = {\n  form: document.querySelector('.form'),\n  formInputs: document.querySelectorAll('.form input'),\n  buttonCreatePromises: document.querySelector('button[type=\"submit\"]'),\n};\n\nrefs.form.addEventListener('submit', onClickButtonCreatePromises);\n\n/**\n * triggers on the submit event and starts functions for creating promises and launching them\n * @param {submit} e event\n */\nfunction onClickButtonCreatePromises(e) {\n  e.preventDefault();\n  const promises = creatingPromises();\n  startingAllPromises(promises);\n}\n\n/**\n * the function creates an array of promises, for this it runs functions to create an object from the data entered in the input,\n * to create an array from data to create promises\n * @returns returns an array of created promises\n */\nfunction creatingPromises() {\n  const objInputsValue = createObjFromInputData(refs.formInputs);\n  const arrayDataPromises = createArrayDataPromises(objInputsValue);\n  return createArrayPromises(arrayDataPromises);\n}\n\n/**\n * the function iterates the array of created promises and adds to then and catch\n * @param {Array} promises\n */\nfunction startingAllPromises(promises) {\n  for (const promise of promises) {\n    promise\n      .then(({ position, delay }) =>\n        Notify.success(`position: ${position}, delay: ${delay}`)\n      )\n      .catch(({ position, delay }) =>\n        Notify.failure(`position: ${position}, delay: ${delay}`)\n      );\n  }\n}\n\n/**\n * the function creates a new transaction based on the corresponding values of position and delay\n * @param {Number} position\n * @param {Number} delay\n * @returns\n */\nfunction createPromise(position, delay) {\n  const shouldResolve = Math.random() > 0.3;\n  return new Promise((resolve, reject) => {\n    setTimeout(() => {\n      if (shouldResolve) {\n        resolve({ position, delay });\n      } else {\n        reject({ position, delay });\n      }\n    }, delay);\n  });\n}\n\n/**\n * function creates promises based on the passed array of data to create promises\n * @param {Array} arr\n * @returns returns an array of created promises\n */\nfunction createArrayPromises(arr) {\n  return arr.map(({ position, delay }) => createPromise(position, delay));\n}\n\n/**\n * the function creates a data array for promises with the number of elements according to the number entered by the user\n * @param {Object} obj\n * @returns array of data to create promises\n */\nfunction createArrayDataPromises(obj) {\n  const arr = [];\n  for (let i = 1; i <= obj.amount; i += 1) {\n    const position = i;\n    let delay = Number(obj.delay) + Number(obj.step * (i - 1));\n    arr.push({ position, delay });\n  }\n  return arr;\n}\n\n/**\n * the function processes the data entered by the user by creating an object\n * @param {Object} inputs\n * @returns  an object with user-entered data in inputs\n */\nfunction createObjFromInputData(inputs) {\n  const obj = {};\n  inputs.forEach(elem => {\n    obj[elem.getAttribute('name')] = elem.value;\n  });\n  return obj;\n}\n"],"names":["$iQIUW","parcelRequire","$47d4ff9957288465$var$refs","form","document","querySelector","formInputs","querySelectorAll","buttonCreatePromises","addEventListener","e","preventDefault","promises","promise","then","position","delay","Notify","success","catch","failure","$47d4ff9957288465$var$startingAllPromises","objInputsValue","inputs","obj","forEach","elem","getAttribute","value","$47d4ff9957288465$var$createObjFromInputData","arr","i","amount","Number","step","push","$47d4ff9957288465$var$createArrayDataPromises","map","shouldResolve","Math","random","Promise","resolve","reject","setTimeout","$47d4ff9957288465$var$createPromise","$47d4ff9957288465$var$creatingPromises"],"version":3,"file":"03-promises.60e42b4b.js.map"}